// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package jwt.actions;

import com.mendix.systemwideinterfaces.core.IContext;
import jwt.usecases.JWTDecoder;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import com.mendix.systemwideinterfaces.core.UserAction;

/**
 * Decodes a JWT string into a plain text JSON for the header and payload. This enables the user to implement a specific JSON mapping that decodes the header or payload. Throws an exception when the token could not be decoded or verified.
 */
public class DecodeVerifyJWTPlainText extends UserAction<IMendixObject>
{
	private final java.lang.String token;
	private final java.lang.String secret;
	private final jwt.proxies.ENU_Algorithm algorithm;
	/** @deprecated use claimsToVerify.getMendixObject() instead. */
	@java.lang.Deprecated(forRemoval = true)
	private final IMendixObject __claimsToVerify;
	private final jwt.proxies.JWT claimsToVerify;
	/** @deprecated use publicKey.getMendixObject() instead. */
	@java.lang.Deprecated(forRemoval = true)
	private final IMendixObject __publicKey;
	private final jwt.proxies.JWTRSAPublicKey publicKey;
	private final java.lang.Long leeway;

	public DecodeVerifyJWTPlainText(
		IContext context,
		java.lang.String _token,
		java.lang.String _secret,
		java.lang.String _algorithm,
		IMendixObject _claimsToVerify,
		IMendixObject _publicKey,
		java.lang.Long _leeway
	)
	{
		super(context);
		this.token = _token;
		this.secret = _secret;
		this.algorithm = _algorithm == null ? null : jwt.proxies.ENU_Algorithm.valueOf(_algorithm);
		this.__claimsToVerify = _claimsToVerify;
		this.claimsToVerify = _claimsToVerify == null ? null : jwt.proxies.JWT.initialize(getContext(), _claimsToVerify);
		this.__publicKey = _publicKey;
		this.publicKey = _publicKey == null ? null : jwt.proxies.JWTRSAPublicKey.initialize(getContext(), _publicKey);
		this.leeway = _leeway;
	}

	@java.lang.Override
	public IMendixObject executeAction() throws Exception
	{
		// BEGIN USER CODE
		JWTDecoder jwtDecoder = new JWTDecoder(this.context(), token);
		IMendixObject jwtPlainText = jwtDecoder.verifyAndDecodePlainText(secret, algorithm, claimsToVerify, publicKey, leeway);
		return jwtPlainText;
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "DecodeVerifyJWTPlainText";
	}

	// BEGIN EXTRA CODE
	// END EXTRA CODE
}
