// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package adminmodule.actions;

import java.net.URI;
import java.net.URLEncoder;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.nio.charset.StandardCharsets;
import java.util.Base64;
import java.net.http.HttpResponse;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import com.mendix.systemwideinterfaces.core.UserAction;
import com.mendix.thirdparty.org.json.JSONObject;
import mainmodule.proxies.Token;

public class JV_UserAccessToken_Refresh extends UserAction<IMendixObject>
{
	private final java.lang.String clientSecret;
	private final java.lang.String refreshToken;
	private final java.lang.String clientId;
	private final java.lang.String accessToken;

	public JV_UserAccessToken_Refresh(
		IContext context,
		java.lang.String _clientSecret,
		java.lang.String _refreshToken,
		java.lang.String _clientId,
		java.lang.String _accessToken
	)
	{
		super(context);
		this.clientSecret = _clientSecret;
		this.refreshToken = _refreshToken;
		this.clientId = _clientId;
		this.accessToken = _accessToken;
	}

	@java.lang.Override
	public IMendixObject executeAction() throws Exception
	{
		// BEGIN USER CODE

        String authHeader = Base64.getEncoder().encodeToString((clientId + ":" + clientSecret).getBytes(StandardCharsets.UTF_8));

        String body = "grant_type=refresh_token"
                + "&refresh_token=" + URLEncoder.encode(refreshToken, StandardCharsets.UTF_8);
				// + "&access_token=" + URLEncoder.encode(accessToken, StandardCharsets.UTF_8);
				
				        HttpRequest request = HttpRequest.newBuilder()
                .uri(URI.create("https://accounts.spotify.com/api/token"))
                .header("Authorization", "Basic " + authHeader)
                .header("Content-Type", "application/x-www-form-urlencoded")
                .POST(HttpRequest.BodyPublishers.ofString(body))
                .build();

        HttpClient client = HttpClient.newHttpClient();
        HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());

        if (response.statusCode() != 200) {
			throw new com.mendix.systemwideinterfaces.MendixRuntimeException("Spotify token request failed: " + response.body());
        
        }

        JSONObject json = new JSONObject(response.body());

        Token token = new Token(getContext());

        token.setAccessToken(json.getString("access_token"));
        token.setScope(json.getString("scope"));
        token.setExpireTime(new java.util.Date(System.currentTimeMillis() + json.getInt("expires_in") * 1000L));
        token.setRefreshToken(json.optString("refresh_token", ""));

        // token.commit();
        return token.getMendixObject();

	
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "JV_UserAccessToken_Refresh";
	}

	// BEGIN EXTRA CODE
	// END EXTRA CODE
}
