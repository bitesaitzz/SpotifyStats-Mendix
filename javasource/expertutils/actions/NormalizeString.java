// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package expertutils.actions;

import com.ibm.icu.text.Normalizer2;
import com.ibm.icu.text.Transliterator;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.UserAction;

/**
 * This Java action returns a fully normalized string suitable for consistent, language-independent search functionality. It uses ICU4J's Unicode case folding (NFKC_CaseFold) for accurate case-insensitive comparison across all scripts.
 * 
 * Optional support is provided for accent/diacritic removal, and developers can further control normalization by supplying ICU transliteration rules for special character mappings (e.g., ł → l, ß → ss).
 * 
 * This action is ideal for pre-processing text for search indexing, deduplication, and multilingual comparison logic.
 */
public class NormalizeString extends UserAction<java.lang.String>
{
	private final java.lang.String OriginalValue;
	private final java.lang.Boolean RemoveDiacritics;
	private final java.lang.String CustomTransliterationRules;

	public NormalizeString(
		IContext context,
		java.lang.String _originalValue,
		java.lang.Boolean _removeDiacritics,
		java.lang.String _customTransliterationRules
	)
	{
		super(context);
		this.OriginalValue = _originalValue;
		this.RemoveDiacritics = _removeDiacritics;
		this.CustomTransliterationRules = _customTransliterationRules;
	}

	@java.lang.Override
	public java.lang.String executeAction() throws Exception
	{
		// BEGIN USER CODE
		if (OriginalValue == null) return null;

		// Unicode NFKC Case Folding (true Unicode case normalization)
        Normalizer2 caseFolding = Normalizer2.getInstance(null, "nfkc_cf", Normalizer2.Mode.COMPOSE);
        String folded = caseFolding.normalize(OriginalValue);

        String result = folded;
        
        // Optional diacritic removal
        if (RemoveDiacritics) {
            // Use Transliterator to remove diacritic marks
            Transliterator stripDiacritics = Transliterator.getInstance("NFD; [:M:] Remove; NFC");
            result = stripDiacritics.transliterate(result);
        }
        
        // Optional custom transliteration
        if (CustomTransliterationRules != null && !CustomTransliterationRules.trim().isEmpty()) {
            Transliterator custom = Transliterator.createFromRules("CustomRules", CustomTransliterationRules, Transliterator.FORWARD);
            result = custom.transliterate(result);
        }


        return result;
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "NormalizeString";
	}

	// BEGIN EXTRA CODE
	// END EXTRA CODE
}
