// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package expertutils.actions;

import com.mendix.systemwideinterfaces.core.IContext;
import expertutils.proxies.RegExGroupValue;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import com.mendix.core.Core;
import java.util.ArrayList;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.regex.PatternSyntaxException;
import com.mendix.systemwideinterfaces.core.UserAction;

/**
 * This Java action is designed to parse an input string using a specified regular expression. It captures values from the parentheses-defined groups and returns them as a list of strings.
 */
public class ExtractRegexGroupValues extends UserAction<java.util.List<IMendixObject>>
{
	private final java.lang.String inputString;
	private final java.lang.String regexPattern;

	public ExtractRegexGroupValues(
		IContext context,
		java.lang.String _inputString,
		java.lang.String _regexPattern
	)
	{
		super(context);
		this.inputString = _inputString;
		this.regexPattern = _regexPattern;
	}

	@java.lang.Override
	public java.util.List<IMendixObject> executeAction() throws Exception
	{
		// BEGIN USER CODE
		// Return empty list when inputs are null or empty
		if (inputString == null || inputString.isEmpty() || regexPattern == null || regexPattern.isEmpty()) {
			return new ArrayList<>();
		}
		
		List<IMendixObject> resultList = new ArrayList<>();
		
		// Compile the regex pattern - if pattern is invalid, a PatternSyntaxException will be thrown
		// to the caller to handle appropriately
		Pattern pattern = Pattern.compile(regexPattern);
		Matcher matcher = pattern.matcher(inputString);
		
		// Find all matches in the input string
		while (matcher.find()) {
			// For each match, extract all capturing groups
			// Group 0 is the entire match, so we start from 1
			for (int i = 1; i <= matcher.groupCount(); i++) {
				String groupValue = matcher.group(i);
				
				// Only add non-null group values
				if (groupValue != null) {
					// Create a new Mendix String object to hold the group value
					IMendixObject stringObject = Core.instantiate(getContext(), RegExGroupValue.entityName);
					stringObject.setValue(getContext(), "Value", groupValue);
					resultList.add(stringObject);
				}
			}
		}
		
		return resultList;
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "ExtractRegexGroupValues";
	}

	// BEGIN EXTRA CODE
	// END EXTRA CODE
}
