// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package hashmaputil.actions;

import java.util.Collections;
import java.util.LinkedHashMap;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import hashmaputil.implementation.HashMapUtil;
import com.mendix.systemwideinterfaces.core.UserAction;

/**
 * Creates a new LinkedHashMap as static resource for global reference. Data stored in it is not automatically garbage collected, so be careful with memory leaks. It should normally be called from ASU microflow and used to cache read-only data for use throughout the app.
 */
public class CreateStaticLinkedHashMap extends UserAction<java.lang.Void>
{
	private final java.lang.String Handle;
	private final java.lang.Boolean AccessOrder;

	public CreateStaticLinkedHashMap(
		IContext context,
		java.lang.String _handle,
		java.lang.Boolean _accessOrder
	)
	{
		super(context);
		this.Handle = _handle;
		this.AccessOrder = _accessOrder;
	}

	@java.lang.Override
	public java.lang.Void executeAction() throws Exception
	{
		// BEGIN USER CODE
		HashMapUtil.putStaticContentMap(Handle, Collections.synchronizedMap(new LinkedHashMap<String, IMendixObject>(16, (float)0.75, this.AccessOrder)));
		return null;
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "CreateStaticLinkedHashMap";
	}

	// BEGIN EXTRA CODE
	// END EXTRA CODE
}
