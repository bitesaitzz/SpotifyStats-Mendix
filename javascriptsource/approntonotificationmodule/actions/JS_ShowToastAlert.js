// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
import "mx-global";
import { Big } from "big.js";
import Swal from "sweetalert2"

// BEGIN EXTRA CODE
// END EXTRA CODE

/**
 * Shows a toast for feedback to the user
 * @param {"ApprontoNotificationModule.ENUM_SweetAlert_Status.success"|"ApprontoNotificationModule.ENUM_SweetAlert_Status.error"|"ApprontoNotificationModule.ENUM_SweetAlert_Status.warning"|"ApprontoNotificationModule.ENUM_SweetAlert_Status.info"|"ApprontoNotificationModule.ENUM_SweetAlert_Status.question"} statusType - The status type of the notification. E.g. Success, Warning, Error, etc.
 * @param {Big} timer - How long the toast will stay on the screen, in milliseconds. Will be infinite if set to 'empty'.
 * @param {boolean} timerProgressBar - Show a progress bar for timer.
 * @param {"ApprontoNotificationModule.ENUM_SweetAlert_Position.top"|"ApprontoNotificationModule.ENUM_SweetAlert_Position.top_start"|"ApprontoNotificationModule.ENUM_SweetAlert_Position.top_end"|"ApprontoNotificationModule.ENUM_SweetAlert_Position.center"|"ApprontoNotificationModule.ENUM_SweetAlert_Position.center_start"|"ApprontoNotificationModule.ENUM_SweetAlert_Position.center_end"|"ApprontoNotificationModule.ENUM_SweetAlert_Position.bottom"|"ApprontoNotificationModule.ENUM_SweetAlert_Position.bottom_start"|"ApprontoNotificationModule.ENUM_SweetAlert_Position.bottom_end"} position - Position of element on the page.
 * @param {boolean} showCloseButton - Display a clickable close button.
 * @param {string} message - The message to display in the toast alert.
 * @param {string} showClass - override default animation(animate__fadeInUp) from https://animate.style
 * @param {string} hideClass - override default animation(animate__fadeOutUp) from https://animate.style
 * @param {string} iconColor - Default color is grey. In combination of your SASS it can be white for example
 * @param {string} iconHtml - if empty default is used, example can be '<div class="glyphicon glyphicon-copy" style="transform: scale(0.75);"></div>'
 * @returns {Promise.<boolean>}
 */
export async function JS_ShowToastAlert(statusType, timer, timerProgressBar, position, showCloseButton, message, showClass, hideClass, iconColor, iconHtml) {
	// BEGIN USER CODE
	 try {
		const Toast = Swal.mixin({
			toast: true,
			iconColor: iconColor.trim() == '' ? 'grey' : iconColor,
			showClass: {
				popup: 'animate__animated '+ (showClass.trim() == '' ? 'animate__fadeInDown' : showClass)
			},
			hideClass: {
				popup: 'animate__animated '+ (hideClass.trim() == '' ? 'animate__fadeOutUp' : hideClass)
			},
			position: position.replace('_','-'),
			showConfirmButton: false,
			showCloseButton: showCloseButton,
			timer: timer,
			timerProgressBar: timerProgressBar,
			didOpen: (toast) => {
				toast.addEventListener('mouseenter', Swal.stopTimer)
				toast.addEventListener('mouseleave', Swal.resumeTimer)
			},
			iconHtml: iconHtml
		});

		Toast.fire({
			icon: statusType,
			title: message
		})
	}
	catch(err)
	{
		console.log("Error while showing alert: "+ err);
	}
	// END USER CODE
}
