// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
import "mx-global";
import { Big } from "big.js";

// BEGIN EXTRA CODE

// ======= Утилиты платформы =======
function isIOS() {
  return /iphone|ipod/i.test(navigator.userAgent);
}
function isIOSSafari() {
  const ua = navigator.userAgent.toLowerCase();
  // Важно: iPadOS часто репортит "Mac" — но нам нужна только iOS (iPhone) для показа подсказки
  return isIOS() && ua.includes('safari') && !ua.includes('crios') && !ua.includes('fxios');
}
function isAndroid() {
  return /android/i.test(navigator.userAgent);
}
function isMobilePhone() {
  // Неплохая эвристика: UA с "Mobi" или явно iPhone/Android, плюс отсечём планшеты по ширине
  const ua = navigator.userAgent.toLowerCase();
  const looksMobile = ua.includes('mobi') || isIOS() || isAndroid();
  const smallViewport = Math.min(window.screen.width, window.screen.height) <= 820;
  // iPad (обычно шире) отсекаем, а iPhone/Android с маленьким экраном пропускаем
  const isiPad = /ipad/.test(ua) || (ua.includes('macintosh') && 'ontouchend' in document);
  return looksMobile && smallViewport && !isiPad;
}

// ======= I18N =======
const A2HS_I18N = {
  ru: {
    title: 'Сохранить приложение на главный экран',
    ios: 'Откройте меню «Поделиться» и выберите «На экран “Домой”».',
    android: 'Откройте меню ⋮ и выберите «Добавить на главный экран».',
    generic: 'Откройте меню «Поделиться» и выберите «На экран “Домой”».',
    installButton: 'Установить',
    close: 'Закрыть',
    installedToast: 'Приложение установлено на главный экран.'
  },
  en: {
    title: 'Save the app to your Home screen',
    ios: 'Open the Share menu and choose “Add to Home Screen”.',
    android: 'Open the ⋮ menu and select “Add to Home screen”.',
    generic: 'Open the Share menu and choose “Add to Home Screen”.',
    installButton: 'Install',
    close: 'Close',
    installedToast: 'The app has been added to your Home screen.'
  },
  pl: {
    title: 'Zapisz aplikację na ekranie głównym',
    ios: 'Otwórz menu Udostępnij i wybierz „Dodaj do ekranu początkowego”.',
    android: 'Otwórz menu ⋮ i wybierz „Dodaj do ekranu początkowego”.',
    generic: 'Użyj menu przeglądarki, aby dodać aplikację na ekran główny.',
    installButton: 'Zainstaluj',
    close: 'Zamknij',
    installedToast: 'Aplikacja została dodana do ekranu głównego.'
  }
};
function pickLang(langCode) {
  const code = (langCode && langCode !== 'auto' ? langCode : (navigator.language || 'en'))
    .toLowerCase()
    .slice(0, 2);
  return A2HS_I18N[code] ? code : 'en';
}

// ======= Состояние и UI =======
function ensureState() {
  const w = window;
  if (!w.__a2hs) {
    w.__a2hs = {
      deferredPrompt: null,
      installed: false,
      ui: { hint: null, installBtn: null },
    };
  }
  return w.__a2hs;
}

function removeHint() {
  const st = ensureState();
  if (st.ui.hint && st.ui.hint.parentNode) {
    st.ui.hint.parentNode.removeChild(st.ui.hint);
    st.ui.hint = null;
    st.ui.installBtn = null;
  }
}

async function tryPromptInstall() {
  const st = ensureState();
  const dp = st.deferredPrompt;
  if (!dp) return false;
  dp.prompt();
  const choice = await dp.userChoice;
  st.deferredPrompt = null; // одноразово
  const accepted = choice?.outcome === 'accepted';
  return accepted;
}

function renderMobileHint(i18n, { showInstallBtn }) {
  removeHint(); // на всякий случай

  const wrap = document.createElement('div');
  wrap.setAttribute('role', 'dialog');
  wrap.setAttribute('aria-live', 'polite');
  wrap.style.cssText = `
    position: fixed; left: 16px; right: 16px; bottom: 16px; z-index: 2147483646;
    background: rgba(30,30,36,.96); color: #fff; border-radius: 14px; padding: 12px 44px 12px 12px;
    font: 500 14px/1.35 -apple-system, system-ui, Segoe UI, Roboto, Arial, sans-serif;
    box-shadow: 0 6px 20px rgba(0,0,0,.35);
  `;

  const title = document.createElement('div');
  title.textContent = i18n.title;
  title.style.cssText = `font-weight: 700; margin-bottom: 6px;`;

  const text = document.createElement('div');
  text.style.cssText = `opacity: .95;`;

  // Платформенно-специфичная инструкция
  if (isIOSSafari()) {
    text.textContent = i18n.ios;
  } else if (isAndroid()) {
    text.textContent = i18n.android;
  } else {
    text.textContent = i18n.generic;
  }

  const closeBtn = document.createElement('button');
  closeBtn.type = 'button';
  closeBtn.setAttribute('aria-label', i18n.close);
  closeBtn.textContent = '×';
  closeBtn.style.cssText = `
    position: absolute; right: 8px; top: 8px; width: 28px; height: 28px;
    border: none; border-radius: 999px; background: #444; color: #fff; cursor: pointer;
    font-weight: 700; display: inline-flex; align-items: center; justify-content: center;
  `;
  closeBtn.addEventListener('click', () => {
    sessionStorage.setItem('a2hs.hintDismissed', '1');
    removeHint();
  });

  wrap.appendChild(title);
  wrap.appendChild(text);
  wrap.appendChild(closeBtn);

  // Опциональная кнопка "Установить" — только если браузер дал beforeinstallprompt (обычно Android)
  if (showInstallBtn) {
    const installBtn = document.createElement('button');
    installBtn.type = 'button';
    installBtn.textContent = i18n.installButton;
    installBtn.style.cssText = `
      margin-top: 10px; background: #0f6fff; color: #fff; border: none; border-radius: 10px;
      padding: 8px 12px; font-weight: 600; cursor: pointer; box-shadow: 0 4px 12px rgba(0,0,0,.25);
    `;
    installBtn.addEventListener('click', async () => {
      try {
        const ok = await tryPromptInstall();
        if (ok) {
          removeHint();
          try { mx?.ui?.info?.(i18n.installedToast); } catch {}
        }
      } catch (e) {
        console.error('A2HS prompt error', e);
      }
    });

    wrap.appendChild(installBtn);
    ensureState().ui.installBtn = installBtn;
  }

  document.body.appendChild(wrap);
  ensureState().ui.hint = wrap;
}

function updateInstallButtonVisibility() {
  const st = ensureState();
  if (!st.ui.installBtn) return;
  st.ui.installBtn.style.display = st.deferredPrompt ? 'inline-block' : 'none';
}

// ======= (Неиспользуемые больше) функции плавающей кнопки — оставлены на случай возврата =======
// Оставляем пустышки для совместимости, чтобы ничего не ломать, но не вызываем их.
function ensureFloatingButton() {}
function updateFloatingUI() {}
function removeFloatingUI() {}

// END EXTRA CODE

/**
 * @param {boolean} autoUI
 * @param {boolean} showIOSHelp
 * @returns {Promise.<boolean>}
 */
export async function JS_A2HS_Init(autoUI, showIOSHelp) {
	// BEGIN USER CODE


try {
  const w = window;
  const st = (function ensureState() {
    if (!w.__a2hs) {
      w.__a2hs = {
        deferredPrompt: null,
        installed: false,
        ui: { hint: null, installBtn: null },
      };
    }
    return w.__a2hs;
  })();

  // ПАРАМЕТРЫ
  // autoUI        — игнорируем (плавающую кнопку больше не рисуем)
  // showIOSHelp   — если false, подсказку не показываем вовсе
  // langCode      — 'auto' | 'ru' | 'en' | 'pl' (опционально)
  const resolvedLang = pickLang(typeof langCode === 'string' ? langCode : 'auto');

  // Определяем, запущено ли как standalone (установленное) и запоминаем
  const isStandalone =
    (w.matchMedia && w.matchMedia('(display-mode: standalone)').matches) ||
    (navigator.standalone === true);
  st.installed = !!isStandalone;

  // Слушаем PWA события
  w.addEventListener('beforeinstallprompt', (e) => {
    e.preventDefault();
    st.deferredPrompt = e;
    updateInstallButtonVisibility(); // если подсказка уже на экране — показать кнопку «Установить»
  });

  w.addEventListener('appinstalled', () => {
    st.installed = true;
    st.deferredPrompt = null;
    removeHint();
    try { mx?.ui?.info?.(A2HS_I18N[resolvedLang].installedToast); } catch {}
  });

  // Покажем подсказку только:
  // - если телефон
  // - если не установлено
  // - если showIOSHelp !== false
  // - и если пользователь не закрывал подсказку в этой сессии
  const shouldShow =
    isMobilePhone() &&
    !st.installed &&
    (showIOSHelp !== false) &&
    sessionStorage.getItem('a2hs.hintDismissed') !== '1';

  if (shouldShow) {
    // На Android (Chrome/Edge/Brave) попробуем вывести кнопку «Установить», но только если dp уже есть
    const i18n = A2HS_I18N[resolvedLang] || A2HS_I18N.en;

    const showInstallBtnInitially = !!st.deferredPrompt && isAndroid();
    // Рендерим подсказку сразу, а кнопку «Установить» отобразим, если dp появится позже
    renderMobileHint(i18n, { showInstallBtn: showInstallBtnInitially });

    // Если dp прилетит ПОСЛЕ рендера — просто покажем кнопку, не пересоздавая подсказку
    w.addEventListener('a2hs:available', updateInstallButtonVisibility, { once: true });
  }

  return !!st.installed;
} catch (e) {
  console.error('JS_A2HS_Init error', e);
  return false;
}



	// END USER CODE
}
